import asyncio
from uuid import uuid4
from datetime import datetime

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.utils.exceptions import MessageNotModified

from tg_bot.services.async_yoomoney import Quickpay, Client
from tg_bot.keyboards.inline import get_payment_keyboard, start_subscribe_keyboard, choose_payment_type_keyboard
from tg_bot.keyboards.callback_data import subcribe_callback
from tg_bot.states.subscription import Subscription
from tg_bot.models.commands.user import (email_exists, user_exists,
                                         select_user, add_user, update_user_subscription_end_date)


async def subscribe_faq(message: types.Message):
    text = "–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–º–µ—Ç–æ–∫ –æ –ø–æ—Å–µ—â–µ–Ω–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ –≠–ò–û–° –°–∏–±–ì–£–¢–ò.\n"\
            "\n<b>FAQ:</b>\n"\
            "1.) <u>–ü–æ—á–µ–º—É –ø–æ–¥–ø–∏—Å–∫–∞ –ø–ª–∞—Ç–Ω–∞—è?</u>\n"\
            "   –ë–æ—Ç –∏ —Å–∫—Ä–∏–ø—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ—Å–µ—â–µ–Ω–∏—è, —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥–µ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ.üñ•\n"\
            "–•–æ—Å—Ç–∏–Ω–≥ - –≤–µ—â—å –ø–ª–∞—Ç–Ω–∞—è, –æ—Ç—Å—é–¥–∞ –∏ –ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.üí∏\n"\
            "–ö —Å—á–∞—Å—Ç—å—é, —Å—É–º–º–∞ —Å–æ–≤—Å–µ–º –Ω–µ–±–æ–ª—å—à–∞—è - <b>–≤—Å–µ–≥–æ 50 —Ä—É–±–ª–µ–π</b>üòÅ\n"\
            "\n 2.) <u>–ü–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –º–æ–∏ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ—Ç –≠–ò–û–°–∞?</u>\n"\
            "   –î–∞, –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–∞—Å –æ—Ç–º–µ—Ç–∏—Ç—å, –Ω–∞–¥–æ –∑–∞–π—Ç–∏ –ø–æ–¥ –≤–∞—à–∏–º–∏ —É—á—ë—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏‚å®Ô∏è\n"\
            "–û–¥–Ω–∞–∫–æ –º–æ–∂–µ—Ç–µ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞—Ç—å –∑–∞ –∏—Ö —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å:\n"\
            "–î–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.üîê\n"\
            "\n3.) <u>–ö–∞–∫ —É–∑–Ω–∞—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏?</u>\n"\
            "   üü¢ /subscription_status\n"\
            "\n4.) <u>–ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å?</u>\n"\
            "   üü¢ /change_login {login}\n"\
            "   üü¢ /change_password {password}\n"\
            "\n5.) <u>–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –º–µ–Ω—è –Ω–µ –æ—Ç–º–µ—Ç–∏–ª–∏ –≤ –≠–ò–û–°–ï?</u>\n"\
            "   –í–µ—Ä—è—Ç–Ω–æ, –≤—ã –Ω–µ–ø—Ä–∞–≤–ª—å–Ω–æ –≤–≤–µ–ª–∏ –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—åüõë\n"\
            "–ü–æ–º–µ–Ω—è–π—Ç–µ –∏—Ö –ø—Ä–∏ –ø–æ–º–æ—â–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–º–∞–Ω–¥üí¨\n"\
            "–ò–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @simon_druchininüë©‚ÄçüöÄ\n"
                
    
    await message.answer(text, reply_markup=start_subscribe_keyboard)
    
async def cancel_subscription(call: types.CallbackQuery, state: FSMContext):
    await call.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏üôÖ‚Äç‚ôÇÔ∏è", show_alert=True)
    await call.message.edit_reply_markup()
    await state.reset_state()

async def get_user_login(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup()
    if await user_exists(call.message.chat.id):
        text = "<b><u>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏</u></b>üõÇ\n"\
                "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —É—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ,\n"\
                "–¢–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–º–∞–Ω–¥—ã:\n"\
                "/change_login {login}\n"\
                "/change_password {password}"
        message = await call.message.answer(text)
        await Subscription.PrePaymentState.set()
        await prepayment_user_credentials_check(message, state)
        return
    
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <u>–ª–æ–≥–∏–Ω</u> –æ—Ç –≠–ò–û–°üì¨")
    await Subscription.EnterPasswordState.set()

async def retype_user_login(message: types.Message, state: FSMContext):
    await message.answer("–î–∞–Ω–Ω—ã–π –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç‚ùå\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <u>–ª–æ–≥–∏–Ω</u> –æ—Ç –≠–ò–û–°üì¨")
    await Subscription.EnterPasswordState.set()

async def get_user_password(message: types.Message, state: FSMContext):
    login = message.text
    
    if await email_exists(login):
        await Subscription.EnterLoginState.set()
        await retype_user_login(message, state)
        return
        
    await state.update_data(login=login)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <u>–ø–∞—Ä–æ–ª—å</u> –æ—Ç –≠–ò–û–°üîì")
    await Subscription.ChoosePaymentTypeState.set()

async def choose_payment_type(message: types.Message, state: FSMContext):
    password = message.text
    await state.update_data(password=password)
    text = "–í—ã–±–µ—Ä–µ—Ç–µ —Ç–∏–ø –æ–ø–ª–∞—Ç—ã üè¶"
    await message.answer(text, reply_markup=choose_payment_type_keyboard)

async def handle_prepayment_state(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup()
    await Subscription.PrePaymentState.set()
    await prepayment_user_credentials_check(call.message, state)

async def get_free_subscribtion(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup()
    data = await state.get_data()
    if not await user_exists(call.message.chat.id):
        login = data.get('login')
        password = data.get('password')
        user = await add_user(call.message.chat.id, login, password)
        if not user:
            await call.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è‚ùå\n –ü–æ–ø—Ä–æ—é—É–π—Ç–µ –µ—â—ë —Ä–∞–∑üõ†")
            return
   
    await update_user_subscription_end_date(call.message.chat.id)
    
    await call.message.answer(f"<u>–ü–æ–¥–ø–∏—Å–∫–∞</u> –ø–æ–ª—É—á–µ–Ω–∞‚úÖ")
    await state.reset_state()

async def prepayment_user_credentials_check(message: types.Message, state: FSMContext):
    await message.answer('–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç–µ –∞–≤—Ç–æ—Ä–æ–≤ ‚ù§Ô∏è')
    if await user_exists(message.chat.id):
        user = await select_user(message.chat.id)
        login = user.login
        password = user.password
    else:
        data = await state.get_data()
        login = data.get('login')
        password = data.get('password')
        
    payment_uuid = f'payment:{message.chat.id}:{uuid4().hex}'
    await state.update_data(login=login)   
    await state.update_data(password=password)
    await state.update_data(payment_uuid=payment_uuid)
    
    quickpay = Quickpay(
        receiver="4100118127309241",
        quickpay_form="shop",
        targets="–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–µ—â–µ–Ω–∏–π –≤ —Å—Ä–µ–¥–µ –≠–ò–û–° –°–∏–±–ì–£–¢–ò.",
        formcomment="–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–µ—â–µ–Ω–∏–π –≤ —Å—Ä–µ–¥–µ –≠–ò–û–° –°–∏–±–ì–£–¢–ò.",
        comment="–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–µ—â–µ–Ω–∏–π –≤ —Å—Ä–µ–¥–µ –≠–ò–û–° –°–∏–±–ì–£–¢–ò.",
        message=payment_uuid,
        paymentType="SB",
        sum=2,
        label=payment_uuid
    )
    redirect_url = await quickpay.get_redirect_url()
    if not redirect_url:
        text = "–°–µ—Ä–≤–∏—Å—ã Yoomoney <b>–Ω–µ –æ—Ç–≤–µ—á–∞—é—Ç</b>üí≠\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–¥–Ω–µ–µüïë"
        message = await message.answer(text)
        return
    payment_keyboard = get_payment_keyboard(redirect_url)
    text =  f"üì¨–í–∞—à –õ–æ–≥–∏–Ω: <b>{login}</b>\nüîì–ü–∞—Ä–æ–ª—å:<b>{password}</b>\n"\
            "‚ùóÔ∏è–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ <u>15 –º–∏–Ω—É—Ç</u>‚ùóÔ∏è"
            
    message = await message.answer(text, reply_markup=payment_keyboard)
    await Subscription.PaymentState.set()
    await payment_check(message, state)

async def payment_check(message: types.Message, state: FSMContext):
    data = await state.get_data()
    payment_uuid = data.get('payment_uuid')
    PAYMENT_TOKEN = message.bot['config'].misc.PAYMENT_TOKEN
    client = Client(PAYMENT_TOKEN)
    success = True
    start_payment_time = datetime.now()
    while True:
        current_state = await state.get_state()
        seconds_passed_since_start = (datetime.now() - start_payment_time).seconds
        if (current_state != "Subscription:PaymentState") or (seconds_passed_since_start > 900):
            try:
                await message.edit_reply_markup()
            except MessageNotModified:
                pass
            if seconds_passed_since_start > 900:
                await state.reset_state()
            return
        
        history_operations = await client.operation_history(label=payment_uuid)
        operation = history_operations[-1] if len(history_operations) else None

        if operation and operation.status == 'success':
            success = True
            await message.edit_reply_markup()
            break
        elif operation:
            await message.edit_reply_markup()
            break
        
        await asyncio.sleep(10)
        
    error_text = "‚ùå<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>‚ùå\n–ï—Å–ª–∏ —É –≤–∞—Å —Å–ø–∏—Å–∞–ª–∏—Å—å —Å—Ä–µ–¥—Å—Ç–≤–∞:\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞ @simon_druchinin"
    if not success:
        await message.answer(error_text)
        return
    if not await user_exists(message.chat.id):
        login = data.get('login')
        password = data.get('password')
        user = await add_user(message.chat.id, login, password)
        if not user:
            await message.answer(error_text)
            return
   
    await update_user_subscription_end_date(message.chat.id)
    
    await message.answer(f"<u>–ü–æ–¥–ø–∏—Å–∫–∞</u> –æ–ø–ª–∞—á–µ–Ω–∞‚úÖ")
    await state.reset_state()

def register_subscribe(dp: Dispatcher):
    dp.register_message_handler(subscribe_faq, commands=['subscribe'])
    dp.register_callback_query_handler(get_user_login, subcribe_callback.filter(command_type="start_subscription"))
    dp.register_callback_query_handler(cancel_subscription, subcribe_callback.filter(command_type="cancel"), state='*')
    dp.register_message_handler(get_user_password, state=Subscription.EnterPasswordState)
    dp.register_message_handler(choose_payment_type, state=Subscription.ChoosePaymentTypeState)
    dp.register_callback_query_handler(handle_prepayment_state, subcribe_callback.filter(command_type="pay_for_subscription"), state=Subscription.ChoosePaymentTypeState)
    dp.register_message_handler(prepayment_user_credentials_check, state=Subscription.PrePaymentState)
    dp.register_callback_query_handler(get_free_subscribtion, subcribe_callback.filter(command_type="get_free_subscribtion"), state=Subscription.ChoosePaymentTypeState)
    