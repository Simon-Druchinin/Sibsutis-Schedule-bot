from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext


from tg_bot.models.commands.user import (get_subscription_data,
                                         email_exists, has_subscription,
                                         update_user_login, update_user_password)

async def start(message: types.Message, state: FSMContext):
    text = "–ü—Ä–∏–≤–µ—Ç!üëã\n"\
            "\n"\
            "üîç–¢—É—Ç —Ç—ã —Å–º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏:\n"\
            "1.) –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ãüï∞\n"\
            "2.) –ü–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–µ—â–µ–Ω–∏–π üìÜ\n"\
            "\n"\
            "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –Ω–∞–ø–∏—à–∏ - /help"
    await message.answer(text)
    await state.reset_state()
    
async def help(message: types.Message):
    text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã‚öôÔ∏è\n"\
            "‚Ä¢ /help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –≤—Å–µ–º –∫–æ–º–º–∞–Ω–¥–∞–º\n"\
            "‚Ä¢ /subscribe - <b>–æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É</b>\n"\
            "‚Ä¢ /schedule - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"\
            "‚Ä¢ /schedule {group_name} - (–ù–∞–ø—Ä. /schedule –ò–ü-112)\n"\
            "‚Ä¢ /subscription_status - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –∏ –¥–µ—Ç–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏\n"\
            "‚Ä¢ /change_login {login} - –∏–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–Ω\n"\
            "‚Ä¢ /change_password {passsword} - –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å"    
    await message.answer(text)
    
async def subscription_status(message: types.Message):
    user_has_subscription = await has_subscription(message.chat.id)
    
    if not user_has_subscription:
        text = "–£ –≤–∞—Å –µ—â—ë –Ω–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ü§∑‚Äç‚ôÇÔ∏è"
        await message.answer(text)
        return
    
    subscription_data = await get_subscription_data(message.chat.id)
    is_subscription_active = subscription_data.get('is_subscription_active')
    subscription_end_date = subscription_data.get('subscription_end_date')
    login = subscription_data.get('login')
    password = subscription_data.get('password')
    status = '–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞‚úÖ' if is_subscription_active else '–ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å‚ùå'
    text = f"<u>–°—Ç–∞—Ç—É—Å:</u> {status}\n"\
            f"üìÜ–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –¥–æ <u>{subscription_end_date}</u>\n"\
            f"üì¨<u>–õ–æ–≥–∏–Ω:</u> {login}\n"\
            f"üîì<u>–ü–∞—Ä–æ–ª—å:</u> {password}"

    await message.answer(text)

async def change_login(message: types.Message):
    login = message.get_args()
    
    if not await has_subscription(message.chat.id):
        await message.answer('–£ –≤–∞—Å –Ω–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞‚ùóÔ∏è')
        return
    if not login:
        await message.answer('–í—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ –ª–æ–≥–∏–Ω‚ùóÔ∏è')
        return
    if await email_exists(login):
        await message.answer('–õ–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç‚ùóÔ∏è')
        return
    await update_user_login(message.chat.id, login)
    await message.answer('<u>–õ–æ–≥–∏–Ω</u> –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω‚úÖ')

async def change_password(message: types.Message):
    password = message.get_args()
    
    if not await has_subscription(message.chat.id):
        await message.answer('–£ –≤–∞—Å –Ω–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞‚ùóÔ∏è')
        return
    if not password:
        await message.answer('–í—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ –ø–∞—Ä–æ–ª—å‚ùóÔ∏è')
        return
    await update_user_password(message.chat.id, password)
    await message.answer('<u>–ü–∞—Ä–æ–ª—å</u> –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω‚úÖ')

def register_base_commands(dp: Dispatcher):
    dp.register_message_handler(start, commands=['start'], state='*')
    dp.register_message_handler(help, commands=['help'])
    dp.register_message_handler(subscription_status, commands=['subscription_status'])
    dp.register_message_handler(change_login, commands=['change_login'])
    dp.register_message_handler(change_password, commands=['change_password'])
